service: be
package:
  individually: true
provider:
  name: aws
  profile: ${opt:aws-profile, "ntuscse"}
  region: "ap-southeast-1"
  stage: ${opt:stage, "dev"}
  runtime: python3.9

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-lift
custom:
  pythonRequirements:
    dockerizePip: false
    usePoetry: true
  serverless-offline:
    allowCache: true
    useChildProcesses: true
    httpPort: 4000

functions:
  root:
    handler: be.root.handler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          method: get
          path: /

  getUsers:
    handler: be.api.v1.endpoints.users.get.handler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          method: get
          path: /users
      - http:
          method: get
          path: /users/{proxy+}

  getProducts:
    handler: be.api.v1.endpoints.products.get.handler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          method: get
          path: /products
      - http:
          method: get
          path: /products/{proxy+}

  getPosts:
    handler: be.api.v1.endpoints.posts.get.handler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          method: get
          path: /posts
      - http:
          method: get
          path: /posts/{proxy+}

constructs:
  myTable:
    type: database/dynamodb-single-table

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:provider.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
        CallbackURLs:
          - https://google.com
